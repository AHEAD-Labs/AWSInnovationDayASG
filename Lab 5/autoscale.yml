AWSTemplateFormatVersion: '2010-09-09'
Description: 'AHEAD Innovation Days: Auto Scale - Lab 5'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Web Server Configuration"
        Parameters:
          - EC2KeyPair
          - VpcId
          - InstanceSubnetList
      -
        Label:
          default: "Notification Configuration"
        Parameters:
          - EmailAddress

    ParameterLabels:
      EC2KeyPair:
        default: "Choose your EC2 key pair"
      VpcId:
        default: "Select the VPC?"
      InstanceSubnetList:
        default: "Select the Subnets"
      EmailAddress:
        default: "What's your email?"

Parameters:

  InstanceSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Public Subnets for the Web Servers

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the Key Pair created in Lab 1

  EmailAddress:
    Type: String
    Description: Enter your Email address to get notifications for scaling operations
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to launch ELB and Instances

Mappings:

    ImageId:
      us-east-1:
        AMI: "ami-1853ac65"
      us-east-2:
        AMI: "ami-25615740"
      us-west-1:
        AMI: "ami-bf5540df"
      us-west-2:
        AMI: "ami-d874e0a0"

Resources:

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      AlarmDescription: Scale-up if CPU > X% for 5 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: 40

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      AlarmDescription: Scale-down if CPU < X% for 10 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      EvaluationPeriods: '2'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: 20

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows port inbound for html
      GroupName: ahead-lab-www-access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: "0.0.0.0/0"

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'true'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: HTTP:80/index.html
        Timeout: '5'
        UnhealthyThreshold: '4'
      Listeners:
      - InstancePort: '80'
        LoadBalancerPort: '80'
        Protocol: HTTP
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Subnets: !Ref InstanceSubnetList

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
                runas=root
          packages:
            yum:
              httpd: []
              php: []
              stress: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
          commands:
            01_chkconfig_http:
              command: chkconfig httpd on
            02_download_file:
              command: wget -O /autoscale.sh https://s3.us-east-2.amazonaws.com/ahead-innovation-days/aws201/lab5/autoscale.sh
            03_change_permissions:
              command: chmod +x /autoscale.sh
            04_execute_script:
              command: sh /autoscale.sh
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: AutoscaleProfile
      ImageId: !FindInMap [ImageId, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyPair
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            runcmd:
             - /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
             - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  AutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AutoScalingFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      RoleName: "Autoscale-Role"

  AutoscaleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AutoScaleRole
      InstanceProfileName: AutoscaleProfile

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref EmailAddress
        Protocol: email

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfig
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      MaxSize: 6
      MinSize: 2
      NotificationConfiguration:
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN:
          Ref: NotificationTopic
      VPCZoneIdentifier:
        Ref: InstanceSubnetList
      Tags:
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: 'true'
        - Key: Function
          Value: "Autoscaling Group"
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'


  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: -1

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: 1

Outputs:
  URL:
    Description: The URL of the website
    Value: !Join ["", ["http://", !GetAtt ElasticLoadBalancer.DNSName]]
